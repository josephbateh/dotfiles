#!/bin/bash

##########################################################################
# Aliases
##########################################################################

# Unique Name
alias ran="uuidgen | cut -f1 -d'-'"
alias ranc="uuidgen | cut -f1 -d'-' | pbcopy"
alias uuid="uuidgen"

# Bash
alias cwd='printf "%q\n" "$(pwd)"'
alias unix-epoch='$(date +%s)'
alias semver-sort='sort -t "." -k1,1n -k2,2n -k3,3n'

# If MacOS, unalias cp, because it adds a flag by default.
[[ "$(uname)" == "Darwin" ]] && unalias cp

## Git
alias g='git'
alias ga='git add -A'
alias gac-amend='git add -A && git commit --amend'
alias gac='git add -A && git commit'
alias gb='git branch'
alias gco='git checkout'
alias gd='git diff'
alias gdb="git branch | grep -v '*' | xargs git branch -D"
alias gfp='git remote prune origin && git fetch && git pull'
alias git-ignore-remove='git rm -r --cached .'
alias gl='git log -3'
alias gpsuo='git push --set-upstream origin `git symbolic-ref --short HEAD`'
alias grpo='git remote prune origin'
alias grs='git reset --soft HEAD~1'
alias grus='git checkout -- .'
alias gst='git status'
alias gars='git add -A && git reset --hard'
alias grs='git -P log -2 -s --format=%h | tail -1 | xargs git reset --soft'
alias git-reset-branch=git fetch origin && git reset --hard "origin/$(git rev-parse --abbrev-ref HEAD)"

function git-reset {
  git add -A
  git checkout -b "git-reset-backup-$(date +%s)-$(git symbolic-ref --short HEAD)"
  git commit -m "Backup from running git-reset"
  git checkout -
  git checkout "$1"
  git remote prune origin
  git fetch
  git pull
}

# Delete the local and checkout the remote branch, but keep the local changes on a backup branch.
function git-recheckout {
  git add -A
  git checkout -b "git-reset-backup-$(date +%s)-$(git symbolic-ref --short HEAD)"
  git commit -m "Backup from running git-reset"
  git branch -D "$1"
  git fetch
  git remote prune origin
  git checkout "$1"
  git pull
}

function git-grep {
  git rev-list --all | xargs git grep "$1"
}

function branch-backup {
  git checkout -b "backup-$(date +%s)-$(git symbolic-ref --short HEAD)"
  git checkout -
}

function hist {
  git log -"$1" --pretty=format:'%C(yellow)[%ad]%C(reset) %C(green)[%h]%C(reset) | %C(red)%s %C(bold red){{%an}}%C(reset) %C(blue)%d%C(reset)' --graph --date=short
}

function squash {
  git rebase -i "$1"
}

function rebase {
    git stash
    git checkout "$1"
    git pull
    git checkout -
    git rebase "$1"
    git stash pop
}

function git-new-branch {
  # Create a new branch with the current changes, off a different branch
  # git-new-branch main new-feature
  git add -A
  git stash
  git checkout "$1"
  git remote prune origin
  git fetch
  git pull
  git checkout -b "$2"
  git stash pop
}

## Ports and Processes
function port {
  lsof -t -i :"$1"
}

function kill-pid {
  kill -9 "$@"
}

function kill-port {
  lsof -t -i :"$1" | xargs kill -9
}

## Docker
alias dc='docker-compose'
alias dk-img-rm='docker images -a -q | xargs docker rmi'
alias dk-rm='docker rm $(docker ps -a -q)'
alias dk-stop='docker kill $(docker ps -q) || true'
alias dk-up='docker-compose up -d'
alias dk='docker'
alias dkc="docker system prune --all --volumes"
alias dki='docker images'
alias dkp='docker ps --format "table {{.ID}}\t{{.Image}}\t{{.Status}}"'
alias dkps='docker ps --filter "status=exited" --format "table {{.ID}}\t{{.Image}}\t{{.Status}}"'
alias dkv='docker volume ls'

function dk-reset {
  docker ps -q | xargs docker stop
  docker ps -aq | xargs docker rm
  docker images -q | xargs docker rmi
  docker system prune --force --all --volumes
}

function dk-remove-with-name {
  docker ps -a | awk '{ print $1,$2 }' | grep "$1" | awk '{print $1 }' | xargs -I {} docker rm {}
}

## Kubernetes
alias k='kubectl'
alias kcon='kubectl config'
alias kcon-current='kubectl config current-context'
alias kcon-list='kubectl config get-contexts --output name'

function kcon-use {
  kubectl config use-context "${1}"
}

function k-cordon {
  kubectl drain --delete-emptydir-data --ignore-daemonsets=true --force "$1"
}

function k-uncordon {
  kubectl uncordon "$1"
}

function kube-drain-node {
  # Add the NoSchedule to a node.
  # Argument 1: Kubernetes context
  # Argument 2: Kubernetes node name
  kubectl config use-context "${1:?}"
  kubectl drain --delete-emptydir-data --ignore-daemonsets=true --force "${2:?}"
}

## Terraform
alias tf='terraform'

## Pandoc
function md-to-word {
  pandoc -o "$1".docx -f markdown -t docx "$1".md
}

### For usage with Google Docs
function md-to-odt {
  pandoc -o "$1".odt -f markdown -t odt "$1".md
}

## Golang
function go-setup {
  go get
  go mod tidy
}

##########################################################################
# Environment variables
##########################################################################

# Default Editor
export EDITOR=nano

# ZSH Special Sauce
export PROMPT_EOL_MARK='' # Stops ZSH from displaying % after patrial lines

